name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os_cxx.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os_cxx:
          - os: windows-2022
            cxx: cl
          - os: ubuntu-24.04
            cxx: g++-13
          - os: macos-13
            cxx: $(brew --prefix llvm@15)/bin/clang++
        std: [20]
        build_type: [Debug, Release]
        generator: [Ninja]
        disable_openssl: [ON, OFF]
        disable_zlib: [OFF]
        disable_brotli: [OFF]
        exclude:
          - os_cxx: { os: windows-2022, cxx: cl }
            build_type: Debug
        include:
          - os_cxx: { os: ubuntu-24.04, cxx: g++-13 }
            std: 20
            build_type: Debug
            generator: Ninja
            disable_openssl: ON
            disable_zlib: ON
            disable_brotli: ON
          - os_cxx: { os: ubuntu-24.04, cxx: g++-13 }
            std: 20
            build_type: Release
            generator: Ninja
            disable_openssl: ON
            disable_zlib: ON
            disable_brotli: ON
          - os_cxx: { os: ubuntu-24.04, cxx: g++-13 }
            std: 23
            build_type: Debug
            generator: Ninja
            disable_openssl: OFF
            disable_zlib: OFF
            disable_brotli: OFF

    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Add msbuild to PATH env
        if: matrix.os_cxx.cxx == 'cl'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Free disk space on ubunut
        if: startsWith(matrix.os_cxx.os, 'ubuntu')
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Install dependencies on windows
        if: startsWith(matrix.os_cxx.os, 'windows')
        shell: pwsh
        run: |
          choco install ninja

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.os_cxx.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get install ninja-build

      - name: Install dependencies on macos
        if: startsWith(matrix.os_cxx.os, 'macos')
        shell: bash
        run: |
          brew install ninja

      - name: Configure
        shell: bash
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          VCPKG_MANIFEST_FEATURES: ${{ startsWith(matrix.os_cxx.os, 'ubuntu') && 'tls;zlib;brotli;liburing;test' || 'tls;zlib;brotli;test' }}
        run: |
          cmake \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.os_cxx.cxx }} \
            -DCMAKE_CXX_STANDARD:STRING=${{ matrix.std }} \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DFITORIA_BUILD_EXAMPLES=ON \
            -DFITORIA_BUILD_TESTS=ON \
            -DFITORIA_DISABLE_OPENSSL=${{ matrix.disable_openssl }} \
            -DFITORIA_DISABLE_ZLIB=${{ matrix.disable_zlib }} \
            -DFITORIA_DISABLE_BROTLI=${{ matrix.disable_brotli }} \
            -DVCPKG_BINARY_SOURCES="${{ env.VCPKG_BINARY_SOURCES }}" \
            -DVCPKG_MANIFEST_FEATURES="${{ env.VCPKG_MANIFEST_FEATURES }}"

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j2

      - name: Test
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure .
