name: codecov

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os_cxx.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os_cxx:
          - os: ubuntu-24.04
            cxx: g++-13
        std: [20]
        build_type: [Debug]
        generator: [Ninja]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.os_cxx.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version

      - name: Configure
        shell: bash
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          VCPKG_MANIFEST_FEATURES: ${{ startsWith(matrix.os_cxx.os, 'ubuntu') && 'tls;zlib;brotli;liburing;test' || 'tls;zlib;brotli;test' }}
        run: |
          cmake \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.os_cxx.cxx }} \
            -DCMAKE_CXX_STANDARD:STRING=${{ matrix.std }} \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DFITORIA_BUILD_EXAMPLES=OFF \
            -DFITORIA_BUILD_TESTS=ON \
            -DFITORIA_DISABLE_OPENSSL=OFF \
            -DFITORIA_DISABLE_ZLIB=OFF \
            -DFITORIA_DISABLE_BROTLI=OFF \
            -DFITORIA_ENABLE_CODECOV=ON \
            -DVCPKG_BINARY_SOURCES="${{ env.VCPKG_BINARY_SOURCES }}" \
            -DVCPKG_MANIFEST_FEATURES="${{ env.VCPKG_MANIFEST_FEATURES }}"

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j3

      - name: Test
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure .

      - name: Generate code coverage report
        shell: bash
        run: |
          sudo apt install lcov
          lcov --gcov-tool=gcov-13 --capture --directory $(pwd)'/build' --output-file coverage.info
          lcov --gcov-tool=gcov-13 --extract coverage.info $(pwd)'/include/fitoria/*' --output-file coverage.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.2.0
        with:
          file: coverage.info
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
