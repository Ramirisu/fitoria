name: codecov

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os_cxx.os }}
    strategy:
      matrix:
        os_cxx:
          - os: ubuntu-22.04
            cxx: g++-12
        std: [20]
        build_type: [Debug]
        generator: [Ninja]

    steps:
      - uses: actions/checkout@v4

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/') }}
          restore-keys: ${{ runner.os }}-vcpkg-

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.os_cxx.os, 'ubuntu')
        env:
          VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg_cache
        run: |
          mkdir -p ${{ github.workspace }}/vcpkg_cache
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          vcpkg install boost-asio:x64-linux
          vcpkg install boost-beast:x64-linux
          vcpkg install boost-json:x64-linux
          vcpkg install boost-url:x64-linux
          vcpkg install boost-regex:x64-linux
          vcpkg install boost-pfr:x64-linux
          vcpkg install openssl:x64-linux
          vcpkg install fmt:x64-linux
          vcpkg install zlib:x64-linux
          vcpkg install doctest:x64-linux
          vcpkg install liburing:x64-linux

      - name: Configure
        shell: bash
        run: |
          cmake \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.os_cxx.cxx }} \
            -DCMAKE_CXX_STANDARD:STRING=${{ matrix.std }} \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DFITORIA_BUILD_EXAMPLES=OFF \
            -DFITORIA_BUILD_TESTS=ON \
            -DFITORIA_DISABLE_ZLIB=OFF \
            -DFITORIA_ENABLE_CODECOV=ON

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j4

      - name: Test
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure .

      - name: Upload code coverage report
        shell: bash
        run: |
          sudo apt install lcov
          lcov --gcov-tool=gcov-12 --capture --directory $(pwd)'/build' --output-file coverage.info
          lcov --gcov-tool=gcov-12 --extract coverage.info $(pwd)'/include/fitoria/*' --output-file coverage.info
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN}
